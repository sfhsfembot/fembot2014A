// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc692.AerialAssist2014.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc692.AerialAssist2014.Robot;
/**
 *
 */
public class  AutonMoveForward extends Command {
    public AutonMoveForward() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
       Robot.driveTrain.encoderStartCounting();
       Robot.driveTrain.motorsForward();
    }
    /*
     * the system begins to intialize, the robot drive train encoder starts counting
     * and the drive train motors move foreword
     * AO 1/23/14
     */
    
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if (Robot.driveTrain.bothLeftAndRightDistance() == 6.0)
        //66 might mean the rotations so we should wait until we calibrate
        //robot to change the value
        //AC 1/25/14
        {
            return true;
        }
        /*
         * if the robotdrive train' lefta and right distance equal 6.0 then the
         * statement is true
         * AO 1/23/14
         */
        else
        {
            return false;
        }
        /*
         * if else then the statement is false
         * AO 1/23/14
         */
    }
    
    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.encoderStopCounting();
        Robot.driveTrain.stop();
    }
    /*
     * the robot drive train stops counting down and the drive train stops
     * AO 1/23/14
     */
    
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    /*
     * this command will make the robot move about 216 inches(? maybe) forward
     * from the starting white line to the blue or red alliance zone
     * AC 1/20/14
     */
}
