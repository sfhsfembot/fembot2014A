// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc692.AerialAssist2014.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc692.AerialAssist2014.Robot;
/**
 *
 */
public class  ShooterReverse extends Command {
    public ShooterReverse() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        //Robot.shooter.shooterMotorOneReverse();
        //commented out because the shooter cannot be initialized here and there
        //is a conditional statement in execute telling the shooter to reverse when the 
        //statement is met
        //AC 1/16/14
    }
    // Called repeatedly when this Command is scheduled to run
    
    protected void execute() {
        if(Robot.shooter.isBackLimitShooterNotPressed()) 
        {
            System.out.println("Back limit is not pressed.");
            Robot.shooter.shooterMotorOneReverse();
        }
        /*
         * if the back limit switch is not pressed, the system will print out "Back 
         * limit is not pressed" and the shooter motor will go in reverse
         * AO 1/16/14
         */
        else
        {
            System.out.println("Back limit is pressed.");
        }
        /*
         * if the back limit switch is pressed, the system will print out "Back 
         * limit is pressed"
         * AO 1/16/16
         */
    }
    
    // Make this return true when this Command no longer needs to run execute()
    
    protected boolean isFinished() {
        if(Robot.shooter.isBackShooterLimitPressed())
        {
            System.out.println("Back limit switch has been pressed.");
            return true;
        }
        /*
         * if the back limit switch is pressed, the system will print out "Back 
         * limit has been pressed" and the command will end
         * AO 1/16/14
         */
        else
        {
            return false;
        }
    }
    // Called once after isFinished returns true
    
    protected void end() {
        Robot.shooter.shooterMotorOneStop();
        System.out.println("Now calling shooter end method.");
    }
    /*
     * the shooter motor stops, then system will print out "Now calling the
     * shooter to end.
     * AO 1/16/14
     */
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    
    protected void interrupted() {
        while(Robot.shooter.isBackLimitShooterNotPressed())
        {
            Robot.shooter.shooterMotorOneReverse();
            System.out.println("Back shooter limit is still not pressed and the shooter is still going in reverse.");
        }
        /*
         * while the back limit switch is interrupted or not pressed, the system
         * will print out "Back shooter limit is still not pressed and the shooter\
         * is still going in reverse and the motor will continue in reverse
         * AO 1/16/14
         */
        Robot.shooter.shooterMotorOneReverse();
        System.out.println("Shooter is going back.");
        end();
    }
    /*when interrupted the shooter will go back and stop
     * AC 1/16/14
     */
}
