// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc692.AerialAssist2014.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc692.AerialAssist2014.Robot;
/**
 *
 */
public class  MoveGathererUp extends Command {
    public MoveGathererUp() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.gatherer);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    
    protected void initialize() {
        //Robot.gatherer.gatherGo();
        Robot.gatherer.gathererGoUp();
        //Robot.gatherer.gatherMotorStop();
        /*
         * commented out to have a manual motor
         * EV 1/28/14
         */
    }
    /*
     * gatherer will move up, then the gatherer motor will stop
     * EV 1/27/14
     */
    
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        //if(Robot.gatherer.isBackGatherLimitNotPressed())
        {
            Robot.gatherer.gathererGoUp();
            //Robot.gatherer.gatherGo();
            System.out.println("Back limit is not pressed; the gatherer is moving forward");
        }
        /*
         * if the gatherer back limit switch is not pressed the gatherer will go up and 
         * the system will print out "Front limit is not pressed; the gatherer is moving forward"
         * AO 1/17/14
         */
        //else
        //{
        //    System.out.println("Back limit is pressed.");
        //}
        /*
         * if the back gather limit switch is not pressed
         * the system will print out "Gatherer is not moving"
         * AO 1/17/14
         */ 
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
        /*if(Robot.gatherer.isBackGatherLimitPressed())
        {
            System.out.println("Back gather limit is pressed.");
            return true;
        }
        /*
         * if the front gather limit switch is pressed the system will print
         * out "Front gather limit is pressed" and the statement will come
         * out true
         * AO 1/17/14
         */
        /*else
        {
            return false;
        }
        /*
         * if the back gather limit switch is not pressed then the staememtn will be false
         * AO 1/17/14
         */
    }
    
    // Called once after isFinished returns true
    protected void end() {
        //Robot.gatherer.gatherStop();
        //Robot.gatherer.gathererAirStop();
        //System.out.println("Gatherer is calling the end method.");
    }
    /*
     * if the air pressure stops the system will print out "Gatherer is calling the
     * end of the method" and the statement will end
     * AO 1/17/14
     */
    
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        /*while(Robot.gatherer.isBackGatherLimitNotPressed())
        {
            Robot.gatherer.gathererGoUp();
            System.out.println("Front gather limit is not pressed.");
        }
        /*
         * if the statement is interrupted and the front gather limit swith is
         * not pressed, the gatherer will go up and the system will print out 
         * "Front gather limit is not pressed"
         * AO 1/17/14
         */
        //end();
    }
}
