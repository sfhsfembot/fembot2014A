// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc692.AerialAssist2014.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc692.AerialAssist2014.Robot;
/**
 *
 */
public class  ShooterGo extends Command {
    public ShooterGo() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        //Robot.shooter.shooterMotorOneGo();
        //commented out because the shooter cannot be initialized here and there
        //is a conditional statement in execute telling the shooter to go when the 
        //statement is met
        //AC 1/16/14
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if(Robot.shooter.isBackShooterLimitPressed())
        {
            System.out.println("Back limit is pressed!");
            Robot.shooter.shooterMotorOneGo();
        }
        //if the limit is pressed the shooter will go forward
        //AC 1/17/14
        else
        {
            System.out.println("Back limit is not pressed.");
        }
        //will print the limit is not pressed when it's not pressed
        //AC 1/17/14
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(Robot.shooter.isFrontShooterLimitPressed())
        {
            System.out.println("Limit switch has been pressed.");
            return true;
        }
        //will finish when the front limit is pressed
        //AC 1/17/14
        else
        {
            return false;
        }
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.shooter.shooterMotorOneStop();
        System.out.println("Now calling shooter end method");
    }
    //will stop when isFinished is called
    //AC 1/17/14
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        while(Robot.shooter.isFrontShooterLimitNotPressed())
        {
            Robot.shooter.shooterMotorOneGo();
            System.out.println("Front shooter limit is still not pressed and shooter is still going forward");
        }
        //if interrupted the shooter will keep going forward until the front limit is pressed
        Robot.shooter.shooterMotorOneReverse();
        //then go back
        System.out.println("Shooter is going back.");
        end();
        //then stop
        //AC 1/17/14
    }
}
