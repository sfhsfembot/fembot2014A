// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc692.AerialAssist2014.subsystems;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.SpeedController;
import org.usfirst.frc692.AerialAssist2014.RobotMap;
import org.usfirst.frc692.AerialAssist2014.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc692.AerialAssist2014.Robot;
/**
 *
 */
public class Gatherer extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController gathererMotor = RobotMap.gatherergathererMotor;
    DoubleSolenoid passerPusher = RobotMap.gathererpasserPusher;
    DoubleSolenoid upAndDownGatherer = RobotMap.gathererupAndDownGatherer;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new GatherRollerControl());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void gatherMotorReverse()
    {
        gathererMotor.set(-1.0);
    }
    /*
     * set the value to -1.0 so that the gatherer motor will turn counterclockwise
     * EV 1/27/14
     */
    
    public void gatherMotorGo()
    {
        gathererMotor.set(1.0);
    }
    /*
     * set the value to 1.0 so that the gatherer motor will turn clockwise
     * EV 1/17/14
     */
    
    public void gatherMotorStop()
    {
        gathererMotor.set(0.0);
    }
    /*
     * set the value to 0.0 so that the gatherer motor will stop
     * EV 1/17/14
     */
    
   /* public boolean isFrontGatherLimitPressed()
    {
        boolean a = frontGatherLimit.get();
        return a;
    }
    /*
     * if the front gather limit swtich is presed the statement will become true
     * AO 1/17/14
     */
    
   /* public boolean isFrontGatherLimitNotPressed()
    {
        boolean b = frontGatherLimit.get();
        return !b;
    }
    /*
     * if the front gather limit switch is not pressed the statement will not
     * become true
     * AO 1/17/14
     */
    
   /* public boolean isBackGatherLimitPressed()
    {
        boolean c = backGatherLimit.get();
        return c;
    }
    /*
     * if the back gather limit switch is pressed the statement will become true
     * AO 1/17/14
     */
    
    /*public boolean isBackGatherLimitNotPressed()
    {
        boolean d = backGatherLimit.get();
        return d;
    }
    /*
     * if the back limit gather limit switch is pressed the staememt will become
     * true
     * AO 1/17/14
     */
    //Commented out the limit switches because limit switches would be
    //useless because the only two positions the gather can take is fully up
    //or down because it is controlled by pneumatics
    //AC 1/25/14
    
    public void gathererGoUp()
    {
        upAndDownGatherer.set(DoubleSolenoid.Value.kReverse);
    }
    /*
     * the double solenoid of the gatherer 
     * pushes air to the forward channel so that the gatherer will raise
     * AO 1/17/14
     */
    
    public void gathererGoDown()
    {
        upAndDownGatherer.set(DoubleSolenoid.Value.kForward);
    }
    /*
     * the double solenoid of the gatherer pushes air to the 
     * forward channel so that the gatherer will raise
     * AO 1/17/14
     */
    
    public void gathererAirStop()
    {
        upAndDownGatherer.set(DoubleSolenoid.Value.kOff);
    }
    /*
     * the air will stop going through the solenoid that controls the
     * gatherer
     * AC 1/25/14
     */
    
    public void pushBallToPass()
    {
        passerPusher.set(DoubleSolenoid.Value.kForward);
    }
    //the piston will push the ball forward to get ready to pass
    //AO 1/25/14
    
    public void pusherGoBack()
    {
        passerPusher.set(DoubleSolenoid.Value.kReverse);
    }
    //The pusher will go back
    //AC 1/25/14
    
    public void pusherAirStop()
    {
        passerPusher.set(DoubleSolenoid.Value.kOff);
    }
    //The air will stop going through the solenoid that controls the pusher
    //AC 1/25/14
    
    public void takeOperatorJoystickValue(double x)
    {
        gathererMotor.set(x);
    }
    /*
     * the gatherer motor is sets the variable x
     * AO 1/28/14
     */
}
