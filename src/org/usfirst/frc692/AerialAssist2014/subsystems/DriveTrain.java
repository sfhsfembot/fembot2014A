// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc692.AerialAssist2014.subsystems;
import org.usfirst.frc692.AerialAssist2014.RobotMap;
import org.usfirst.frc692.AerialAssist2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc692.AerialAssist2014.Robot;
/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController lefttDriveVictor1 = RobotMap.driveTrainlefttDriveVictor1;
    SpeedController leftDriveVictor2 = RobotMap.driveTrainleftDriveVictor2;
    SpeedController rightDriveVictor1 = RobotMap.driveTrainrightDriveVictor1;
    SpeedController rightDriveVictor2 = RobotMap.driveTrainrightDriveVictor2;
    RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    Encoder leftEncoder = RobotMap.driveTrainleftEncoder;
    Encoder rightEncoder = RobotMap.driveTrainrightEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveWithTwoJoystick());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
     public void motorsForward()
    {
        robotDrive.drive(1, 0);
    }
    //sets victors to full power, causing the robot to go forward
    //AC 1/11/14
    
    public void stop()
    {
        robotDrive.drive(0, 0);
    }
    //sets motors to neutral, making the robot stop
    //AC 1/11/14
    
    public void takeJoystickAxisValues(double LeftDrive, double RightDrive)
    {
        robotDrive.tankDrive(LeftDrive, RightDrive);
    }
    
    //takes the axis values of the joysticks and inputs them into the victors
    //AC 1/11/14
    
    /*
     * public double getLeftDistance()
    {
        double leftDistance = leftEncoder.getDistance();
        //method will take distance in which the robot has travelled
        //AC 1/20/14
        return leftDistance;
    }
    //takes distance the robot has travelled
    //AC 1/20/14
    public double getRightDistance()
    {
        double rightDistance = rightEncoder.getDistance();
        return rightDistance;
    }
    */
    
    public double bothLeftAndRightDistance()
    {
        double leftDistance = leftEncoder.getDistance();
        double rightDistance = rightEncoder.getDistance();
        System.out.println(leftDistance + rightDistance);
        return leftDistance + rightDistance;
    }
    /*
     * method will take distance in which the robot's left and right encoders 
     * will get the distance and the system will print the added value to check
     * the distance of the two encoders and then the system will add the left 
     * and right distance together then the system will return the value
     * AO 1/23/14
     */
    
    public void encoderStartCounting()
    {
        leftEncoder.start();
        rightEncoder.start();
    }
    //both left and right encoders will start counting revolutions
    //AC 1/23/14
    
    public void encoderStopCounting()
    {
        leftEncoder.stop();
        rightEncoder.stop();
    }
    //left and right encoders will stop counting revolutions
    //AC 1/23/14
    
    public void autonMoveForward()
    {
        robotDrive.drive(0.6, 0);
    }
    
}
